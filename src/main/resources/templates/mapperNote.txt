package comXXX.mapper.provider;

import java.text.MessageFormat;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import org.apache.ibatis.jdbc.SQL;

public class classXXXProvider {


	/**
	 * 条件查询
	 * @param param
	 * @return
	 */
    public String selectByBaseQuery(Map<String, Object> param) {
        return new SQL() {
            {
                SELECT("*");
                FROM("tablenameXXX");
BaseQueryNoteXXX
                
            }
            
        }.toString();
    }
    
    
    /**
     * 条件查询条数
     * @param param
     * @return
     */
    public String selectCountByBaseQuery(Map<String, Object> param) {
    	
    	return new SQL() {
    		{
    			SELECT("count(*)");
    			FROM("tablenameXXX");
    			
BaseQueryNoteXXX

    		}
    		
    	}.toString();
    }
    
    /**
     * 主键查询
     * @param param
     * @return
     */
    public String selectByPrimaryKey(Map<String, Object> param) {
    	return new SQL() {
    		{
    			SELECT("*");
    			FROM("tablenameXXX");
    			WHERE("keyXXX = #{ keyXXX }");
    		}
    		
    	}.toString();
    }
    
    /**
     * 主键查询(条数)
     * @param param
     * @return
     */
    public String selectCountByPrimaryKey(Map<String, Object> param) {
    	return new SQL() {
    		{
    			SELECT("count(*)");
    			FROM("tablenameXXX");
    			WHERE("keyXXX = #{ keyXXX }");
    		}
    		
    	}.toString();
    }
    
    /**
     * =新增
     * @param param
     * @return
     */
    public String insert(Map<String, Object> param) {
    	return new SQL() {
    		{
    		
insertNoteXXX
    			
    		}
    		
    	}.toString();
    }

    
    /**
     * =批量新增
     * @param param
     * @return
     */
    public String insertList(List<Map<String , Object>> list) {
    	StringBuilder sb = new StringBuilder();
    	sb.append("INSERT INTO tablenameXXX (");
insertListNoteXXX
    	sb.append(")VALUES");
    	
    	StringBuilder listSBuilder = new StringBuilder();
insertListValueNoteXXX
    	
    	MessageFormat mf = new MessageFormat(
    			"("+ listSBuilder.toString()+ ")");
    	
    	for (int i = 0; i < list.size(); i++) {
    		sb.append("\r\n");
    		sb.append(mf.format(new Object[]{i}));
    		if (i < list.size() - 1) {
    			sb.append(",");
    		}
    	}
    	return sb.toString();
    }
    
        
    /**
     * 主键更新
     * @param param
     * @return
     */
    public String updateByPrimaryKey(Map<String, Object> param) {
    	return new SQL() {
    		{
    			
updateByPrimaryKeyNoteXXX
    			
    		}
    		
    	}.toString();
    }
    
    /**
     * 条件更新
     * @param param
     * @return
     */
    public String updateByBaseQuery(Map<String, Object> param) {
    	return new SQL() {
    		{

updateByConditionXXX

    		}
    		
    	}.toString();
    }
    
    
    /**
     * =批量更新
     * @param param
     * @return
     */
    public String updateList(List<Map<String , Object>> list) {
    	
    	String sql = new SQL() {
    		{
updateListNoteXXX
    		}
    		
    	}.toString();
    	
    	
    	StringBuilder sb = new StringBuilder();
    	System.out.println(sql);
    	MessageFormat mf = new MessageFormat(
    			sql
    			);
    			
    	for (int i = 0; i < list.size(); i++) {
    		sb.append(mf.format(new Object[]{i}));
    		if (i < list.size() - 1) {
    			sb.append(";\r\n");
    		}
    	}	
    	
    	return sb.toString();
    }
    
    public boolean isNotEmpty(Object obj) {
    	if (obj != null && !obj.equals("") && !obj.equals("null")) {
    		return false;
		}
		return false;
	}
}
