package comXXX.controller;

import java.io.IOException;
import java.io.IOException;
import java.util.List;
import java.util.Map;

import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.http.MediaType;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.RestController;

import comXXX.domain.ResultTmplateMsg;
import comXXX.service.classXXXService;

/**
 *
 * TableChinessNameXXX
 *
 * @author authorXXX
 * @CreateDate DateXXX
 *
 */

@SuppressWarnings({"rawtypes"})
@RestController
@RequestMapping(value = "/classXXX")
public class classXXXController {

	@Autowired
	private classXXXService classMinXXXService;

	private final Logger log = LoggerFactory.getLogger(this.getClass());

	/**
	 * TableChinessNameXXX（分页）
	 * 
	 * @param map
	 * @return
	 */
	@RequestMapping(value = "/Page", produces = MediaType.APPLICATION_JSON_UTF8_VALUE, method = { RequestMethod.POST })
	public ResultTmplateMsg Page(@RequestBody Map<String, Object> map) {
		log.info("TableChinessNameXXX 分页查询 classXXX---Page ===>" + map);
		map = ResultTmplateMsg.mapCleanNull(map);
		// 分页数据
		List<Map<String, Object>> vlist = classMinXXXService.selectByPrimaryKey(map);
		// 总数据条数
		int totalSize = classMinXXXService.selectCountByPrimaryKey(map);
		ResultTmplateMsg resultMsg = ResultTmplateMsg.ResultMsgByPage(map, vlist, totalSize);
		log.info("分页查询-classXXX <=====" + resultMsg);
		return resultMsg;
	}

	/**
	 * TableChinessNameXXX（条件查询-不分页）
	 * 
	 * @param map
	 * @return
	 */
	@RequestMapping(value = "/selectByBaseQuery", produces = MediaType.APPLICATION_JSON_UTF8_VALUE, method = {
			RequestMethod.POST })
	public ResultTmplateMsg selectByBaseQuery(@RequestBody Map<String, Object> map) {
		log.info("TableChinessNameXXX 条件查询 classXXX---Page ===>\r\n" + map);
		map = ResultTmplateMsg.mapCleanNull(map);
		List<Map<String, Object>> vlist = classMinXXXService.selectByBaseQuery(map);
		ResultTmplateMsg resultMsg = ResultTmplateMsg.commResultMsg(vlist);
//		ResultTmplateMsg resultMsg = ResultTmplateMsg.commResultMsgYMD(vlist);//返回的时间格式为yyyy-MM-dd
		log.info("条件查询-classXXX <=====" + resultMsg);
		return resultMsg;
	}

	/**
	 * TableChinessNameXXX（新增）
	 * 
	 * @param map
	 * @return
	 */
	@RequestMapping(value = "/insert", produces = MediaType.APPLICATION_JSON_UTF8_VALUE, method = RequestMethod.POST)
	public ResultTmplateMsg insert(@RequestBody Map<String, Object> map) {
		log.info("新增 classXXX--insert ===>" + map);
		map = ResultTmplateMsg.mapCleanNull(map);
		int count = classMinXXXService.insert(map);
		ResultTmplateMsg resultMsg = ResultTmplateMsg.countResultyMsg(count, "新增成功", "新增失败");
		log.info("新增 classXXX--insert <====" + resultMsg);
		return resultMsg;
	}

	/**
	 * TableChinessNameXXX（删除）
	 * 
	 * @param map
	 * @return
	 */
	@RequestMapping(value = "/delete", produces = MediaType.APPLICATION_JSON_UTF8_VALUE, method = RequestMethod.POST)
	public ResultTmplateMsg delete(@RequestBody Map<String, Object> map) {
		log.info("TableChinessNameXXX 删除 classXXX--delete ===>" + map);
		map = ResultTmplateMsg.mapCleanNull(map);
		if (map.get("keyXXX") == null) {
			return ResultTmplateMsg.countResultyMsg(-1, "", "请输入keyXXX");
		}
		int count = classMinXXXService.deleteByPrimaryKey(map);
		ResultTmplateMsg resultMsg = ResultTmplateMsg.countResultyMsg(count, "删除成功", "删除失败");
		log.info("删除 classXXX--delete <====" + resultMsg);
		return resultMsg;
	}

	/**
	 * TableChinessNameXXX（修改）
	 * 
	 * @param map
	 * @return
	 */
	@RequestMapping(value = "/update", produces = MediaType.APPLICATION_JSON_UTF8_VALUE, method = RequestMethod.POST)
	public ResultTmplateMsg update(@RequestBody Map<String, Object> map) {
		log.info("TableChinessNameXXX 更新 classXXX--update ===>" + map);
		map = ResultTmplateMsg.mapCleanNull(map);
		if (map.get("keyXXX") == null) {
			return ResultTmplateMsg.countResultyMsg(-1, "", "请输入keyXXX");
		}
		int count = classMinXXXService.updateByPrimaryKey(map);
		ResultTmplateMsg resultMsg = ResultTmplateMsg.countResultyMsg(count, "更新成功", "更新失败");
		log.info("更新 classXXX--update <====" + resultMsg);
		return resultMsg;
	}

}